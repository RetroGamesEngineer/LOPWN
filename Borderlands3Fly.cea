[enable]
//Borderlands 3 Fly Cheat v1.1.1
//RetroGamesEngineer on github (C) 2019
alloc(FlyThread,$1000,Borderlands3.exe+9a8d2b)
registersymbol(FlyThread)
createthread(FlyThreadStart)
define(VK_F12,7b) //Toggle on/off (F12)
define(VK_MBUTTON,4) //Trigger Flying (Middle Mouse Button)
define(MEGAHOTKEYQUIT,4c4b4a485a101211) //Quit thread to allow disabling (Ctrl+Alt+Shift+Z+H+J+K+L)

struct pitch_yaw_custom_vectors
inverse_sin_yaw: dd ?
cos_yaw: dd ?
sin_pitch: dd ?
zero1: dd ?
cos_pitch1: dd ?
cos_pitch2: dd ?
pitch_steepness_factor: dd ?
zero2: dd ?
fly_speed1: dd ?
fly_speed2: dd ?
fly_speed3: dd ?
zero3: dd ?
endstruct

FlyThread:
PitchYawVectors:
dd 0 0 0 0 0 0 (float)1.0 0 0 0 0 0
PitchYawPointer:
dq 0
PlayerPositionPointer:
dq 0
FlyStatus: //1 == running, 2 == should exit, 0 == thread exited
dd 1
FlyActive: //1 == can fly, 0 == can't fly
dd 1
FlySpeed:
dd (float)3.37
Flying:
dd 0
PI_divided_by_180:
dd (float)0.0174532
Ninety:
dd (float)90.0
dq 9090909090909090

FlyThreadStart: //+0x60
sub rsp,100
@@:
mov rcx,1
call Sleep
mov rax,[PitchYawPointer]
test rax,rax
je @b
mov rax,[PlayerPositionPointer]
test rax,rax
je @b
NoLongerFlying:
mov [Flying],0

FlyThreadLoop:
mov rcx,1
call Sleep
cmp [FlyStatus],2 //Exit thread on FlyStatus value of 2 / thread should exit
je FlyThreadExit
mov rcx,MEGAHOTKEYQUIT //Or megahotkey pressed: Ctrl+Alt+Shift+Z+H+J+K+L
call AreKeysPressed
je FlyThreadExit
mov rcx,VK_F12
call AreKeysPressed
jne @f
xor [FlyActive],1 //Toggle Fly on/off
mov rcx,#200
call Sleep
@@:
cmp [FlyActive],1 //Only if fly is activated
jne NoLongerFlying
mov rcx,VK_MBUTTON  //And Middle Mouse Button is pressed
call AreKeysPressed
jne NoLongerFlying
//PitchYawVectors layout: -sin(yaw-90.0f), cos(yaw-90.0f), sin(pitch), 0.0f
//PitchYawVectors+10 layout: cos(pitch), cos(pitch), 1.0f, 0.0f
//PitchYawVectors+20 layout: FlySpeed, FlySpeed, FlySpeed, 0.0f
mov [Flying],1 //Currently flying == true
mov rdx,PitchYawVectors
mov rax,[PitchYawPointer]
fld dword [rax+50] //load pitch
fmul dword [PI_divided_by_180] //Degrees to radians
fsincos
fst dword [rdx+cos_pitch1]
fstp dword [rdx+cos_pitch2]
fstp dword [rdx+sin_pitch]
fld dword [rax+54] //load yaw
fsub dword [Ninety] //yaw - 90.0f
fmul dword [PI_divided_by_180] //Degrees to radians
fsincos
fstp dword [rdx+cos_yaw]
fstp dword [rdx+inverse_sin_yaw]
xor byte [rdx+inverse_sin_yaw+3],80 //flip sign -> sin(yaw-90.0f) == -(sin(yaw-90.0f))
mov eax,[FlySpeed]
mov [rdx+fly_speed1],eax
mov [rdx+fly_speed2],eax
mov [rdx+fly_speed3],eax
//Vectorized calculate new x,y,z coordinates simultaneously
//Multiply the three set up vectors and then add current player coordinates
//Then directly write new position back to player coordinates
movaps xmm1,[rdx]  //xmm1 == -sin(yaw-90.0f), cos(yaw-90.0f), sin(pitch), 0.0f
mulps xmm1,[rdx+10]//xmm1 *= cos(pitch), cos(pitch), 1.0f, 0.0f
mulps xmm1,[rdx+20]//xmm1 *= FlySpeed, FlySpeed, FlySpeed, 0.0f
mov rax,[PlayerPositionPointer]
addps xmm1,[rax+220]   //xmm1 += Player.x, Player.y, Player.z, 0.0f
movaps [rax+220],xmm1  //PlayerXYZ == xmm1
jmp FlyThreadLoop

FlyThreadExit:
add rsp,100
mov [FlyStatus],0 //Set FlyStatus value of 0 / thread exited
ret

{uint64 AreKeysPressed(uint64 packedKeySequence)
Returns in rax: zero if all keys were held down, or nonzero if not all keys were held down
rcx == packedKeySequence (keys packed in reverse order [max: eight keys])}
AreKeysPressed:
push r15
mov r15,rcx
@@:
test r15,r15
je short KeysArePressed
movzx rcx,r15l
call NtUserGetKeyState
xor rax,80
jns short KeysArentPressed
shr r15,8
jmp @b
KeysArePressed:
xor rax,rax
KeysArentPressed:
pop r15
ret

GetPitchYawPointer:
movsd [rbx+50],xmm0
mov [PitchYawPointer],rbx
jmp Return1

GetPlayerPositionPointer:
movups xmm1,[rax+220]
mov [PlayerPositionPointer],rax
jmp Return2

NullifyGravityWhileFlying:
cmp [Flying],1
jne short DontNullifyGravity
mov rcx,[PlayerPositionPointer]
cmp rdi,rcx
jne short DontNullifyGravity
movq rcx,xmm12 //While flying and it is player's position being updated
mov [rdi+220],rcx //Only allow updating x+y coordinates excluding z
jmp Return3
DontNullifyGravity:
movups [rdi+220],xmm12
jmp Return3

Borderlands3.exe+9a8d2b:
jmp GetPitchYawPointer
Return1:

Borderlands3.exe+131651e1:
jmp GetPlayerPositionPointer
nop 2
Return2:

Borderlands3.exe+1c27984f:
jmp NullifyGravityWhileFlying
nop 3
Return3:

[disable]
assert(FlyThread+40,0) //Verify thread status == 0 == thread exited before allowing disabling and dealloc'ing

Borderlands3.exe+9a8d2b:   //[rbx+50] == Pitch, [rbx+54] == Yaw
db f2 0f 11 43 50
//movsd [rbx+50],xmm0

Borderlands3.exe+131651e1: //[rax+220] == Player Position (X,Y,Z)
db 0f 10 88 20 02 00 00
//movups xmm1,[rax+220]

Borderlands3.exe+1c27984f: //Writes to player + other entity coordinates
db 44 0f 11 a7 20 02 00 00
//movups [rdi+220],xmm12

dealloc(FlyThread)
unregistersymbol(FlyThread)
